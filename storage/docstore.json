{"docstore/metadata": {"bd07752a-5e8a-49d6-993f-4d6da276fea2": {"doc_hash": "0d88e5b36b28eac7b0c56cf81bb1c540a67162f014afdf0f21bec4d1ada7779d"}, "bde5990f-e845-42f2-93e2-2be601ef15b4": {"doc_hash": "0795e3c87bf719f3228a5e5a580238edffa89cd1a0cb668cc5699a956ba291f8"}, "e251402f-3cd7-44df-bb8a-197cdf51814a": {"doc_hash": "f120b4fd7efeed60b7c5bbfa418c63972e928d8a21c85edc6a87931dae7e0a3e"}, "05a20e18-8fc3-4883-9c8f-b0a4024516da": {"doc_hash": "366c013590d804d7f0e79b148dac655bbe8b16bbf46ca2a3cd77d5ca46af0995"}, "41f5853b-080d-4dd9-aafb-161d618ce7f9": {"doc_hash": "964fd3b6823934830f3b3fbfed6cf7ccaf00de3ac8fa34eefbeca3927430b724", "ref_doc_id": "bd07752a-5e8a-49d6-993f-4d6da276fea2"}, "32119916-2267-4c20-a26f-98f7a9ecbe07": {"doc_hash": "288b199349cfed17d73508539ea206b3309e543b443294551e762b5de03868c4", "ref_doc_id": "bde5990f-e845-42f2-93e2-2be601ef15b4"}, "4f4636be-bf55-4a5c-94af-14ad909fc020": {"doc_hash": "47751f108d6809b246106b1f764fba134819b884c66fc07e35af97a3838331ba", "ref_doc_id": "bde5990f-e845-42f2-93e2-2be601ef15b4"}, "a5e0c2e9-a305-494d-bd82-194ac293121a": {"doc_hash": "e0b0d8699b1840a54b3c954c2f41d152c22af58ee5049bb0f44e3317b77e6d69", "ref_doc_id": "e251402f-3cd7-44df-bb8a-197cdf51814a"}, "e581b7d6-8678-43c2-b684-36023452687d": {"doc_hash": "91d8a61bf99b00030e5aac28eafca1b69d767a192044a6a04b74e29265c89dfa", "ref_doc_id": "e251402f-3cd7-44df-bb8a-197cdf51814a"}, "e46745e2-9a3b-467d-9481-9f3a3cfcdbbe": {"doc_hash": "ebe751acff7e5cc2f6206c479f6c9cae0d7d867192db90d106ba6d9cd57e8bf7", "ref_doc_id": "05a20e18-8fc3-4883-9c8f-b0a4024516da"}, "9f6d1077-40f7-44f4-8dbc-66ff09090efa": {"doc_hash": "98b4fac7e999069b8f1c4dc421aa83772dba4ffdf59c6aba8833ae0c7c771ec4", "ref_doc_id": "05a20e18-8fc3-4883-9c8f-b0a4024516da"}}, "docstore/data": {"41f5853b-080d-4dd9-aafb-161d618ce7f9": {"__data__": {"id_": "41f5853b-080d-4dd9-aafb-161d618ce7f9", "embedding": null, "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 3240, "creation_date": "2025-02-22", "last_modified_date": "2025-02-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd07752a-5e8a-49d6-993f-4d6da276fea2", "node_type": "4", "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 3240, "creation_date": "2025-02-22", "last_modified_date": "2025-02-22"}, "hash": "0d88e5b36b28eac7b0c56cf81bb1c540a67162f014afdf0f21bec4d1ada7779d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "What is machine learning?\nMachine learning (ML) is a branch of artificial intelligence (AI) focused on enabling computers and machines to imitate the way that humans learn, to perform tasks autonomously, and to improve their performance and accuracy through experience and exposure to more data.\nA Decision Process: In general, machine learning algorithms are used to make a prediction or classification. Based on some input data, which can be labeled or unlabeled, your algorithm will produce an estimate about a pattern in the data.\n\nAn Error Function: An error function evaluates the prediction of the model. If there are known examples, an error function can make a comparison to assess the accuracy of the model.\n\nA Model Optimization Process: If the model can fit better to the data points in the training set, then weights are adjusted to reduce the discrepancy between the known example and the model estimate. The algorithm will repeat this iterative \u201cevaluate and optimize\u201d process, updating weights autonomously until a threshold of accuracy has been met.\n\nMachine learning versus deep learning versus neural networks\nSince deep learning and machine learning tend to be used interchangeably, it\u2019s worth noting the nuances between the two. Machine learning, deep learning, and neural networks are all sub-fields of artificial intelligence. However, neural networks is actually a sub-field of machine learning, and deep learning is a sub-field of neural networks.\n\nThe way in which deep learning and machine learning differ is in how each algorithm learns. \"Deep\" machine learning can use labeled datasets, also known as supervised learning, to inform its algorithm, but it doesn\u2019t necessarily require a labeled dataset. The deep learning process can ingest unstructured data in its raw form (e.g., text or images), and it can automatically determine the set of features which distinguish different categories of data from one another. This eliminates some of the human intervention required and enables the use of large amounts of data. You can think of deep learning as \"scalable machine learning\" as Lex Fridman notes in this MIT lecture1.\n\nClassical, or \"non-deep,\" machine learning is more dependent on human intervention to learn. Human experts determine the set of features to understand the differences between data inputs, usually requiring more structured data to learn.\n\nNeural networks, or artificial neural networks (ANNs), are comprised of node layers, containing an input layer, one or more hidden layers, and an output layer. Each node, or artificial neuron, connects to another and has an associated weight and threshold. If the output of any individual node is above the specified threshold value, that node is activated, sending data to the next layer of the network. Otherwise, no data is passed along to the next layer of the network by that node. The \u201cdeep\u201d in deep learning is just referring to the number of layers in a neural network. A neural network that consists of more than three layers\u2014which would be inclusive of the input and the output\u2014can be considered a deep learning algorithm or a deep neural network. A neural network that only has three layers is just a basic neural network.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3224, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32119916-2267-4c20-a26f-98f7a9ecbe07": {"__data__": {"id_": "32119916-2267-4c20-a26f-98f7a9ecbe07", "embedding": null, "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\playwr.txt", "file_name": "playwr.txt", "file_type": "text/plain", "file_size": 4736, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bde5990f-e845-42f2-93e2-2be601ef15b4", "node_type": "4", "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\playwr.txt", "file_name": "playwr.txt", "file_type": "text/plain", "file_size": 4736, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "0795e3c87bf719f3228a5e5a580238edffa89cd1a0cb668cc5699a956ba291f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f4636be-bf55-4a5c-94af-14ad909fc020", "node_type": "1", "metadata": {}, "hash": "d2cda47fa2ee1b4286ebf531e8498503e0f12d3575ea0217c90a036f7aed5a60", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Playwright\r\n\r\np.chromium.launch(headless=false) //headless=flase make it visible in frontend and if not given it will run in background only\r\npage.title() //gives the first line that appears when we hover at the tab icon on the top\r\n\r\n#css selector -id-#,class-. ,attribute- tagname[attribute=\u201dvalue\u201d]\r\n#id using\r\n=>email_textbox=page.wait_for_selector(\u2018#email\u2019)\r\nemail_textbox.type(\u2018bhoomi@gmail.com\u2019)\r\npage.wait_for_timeout(3000)\r\n=>page.wait_for_selector(\u2018#idname\u2019) .click()\r\npage.wait_for_timeout(3000)\r\n\r\n#xpath-Relative xpath \u2018//\u2019\r\n#using attribute - //tagname[@attributename=\u201dvalue\u201d]\r\n#text- //tagname[text()=\u201dwhatever_text\u201d]\r\n\r\n#contains\r\n#attributes- //tagname[contains(@attribute,\u201dvalue\u201d)]\r\n#text -//tagname[contains(text(),\u201dUsername\u201d)]\r\n\r\n#Starts-with- //tagname[starts-with(@id,\u2019whatever_u_type\u2019)]  //similarly we can do it with end-with\r\n# family\r\n#parent - //tagname[@id=\u201dxy\u201d]/parent:: input[]\r\n#child - //tagname[@id =\u201dxy\u201d]/child::input[]\r\n#sibling-//tagname[@id =\u201dxy\u201d]//sibling::input[]\r\n#ancestor\r\n=>Select Drop\r\n1.Find the select Location \r\n2.select_dropdown = page.query_selector('//select[@id=\"Skills\"]')\r\n3.Select the option \r\n4.select_dropdown.select_option(label='Art Design') page.select_option('//select[@id=\"Skills\"]',label='AutoCAD') \r\n5.page.wait_for_timeout(5000)\r\n\r\n=>Script for Radio Button:\r\nradio_button = page.query_selector('//input[@value=\"FeMale\"]') \r\nradio_button.click()\r\nradio_button.check() \r\nScript for Radio Button:\r\n checkbox = page.query_selector('//input[@value=\"Cricket\"]')\r\n checkbox.check()\r\n\r\n=>def handle_dialog(dialog): \r\nmessage = dialog.message \r\ntext_alert.append(message)\r\n dialog.accept()\r\n\r\n with sync_playwright() as p: \r\nbrowser = p.chromium.launch(headless=False)\r\n page = browser.new_page()\r\n page.goto('https://demo.automationtesting.in/Ale...) \r\n# page.wait_for_selector('//div[@id=\u201dOKTAB\"]/button').click() \r\n\r\npage.wait_for_selector('//a[@href=\"#CancelTab\"]').click() \r\npage.wait_for_timeout(2000) \r\n#control alert\r\npage.on(\"dialog\",handle_dialog)\r\n page.wait_for_selector('//div[@id=\"CancelTab\"]/button').click() \r\npage.wait_for_timeout(2000) \r\nprint(text_alert[0])\r\n=>/ is used for direct child and // is used for siblings\r\n=>playwright automatically clicks on ok in alerts while selenium does not\r\n=>context can store multiple pages or tabs as list\r\n#to switch to new page\r\nnew_page=total_pages[1]\r\nnew_page.bring_to_front()\r\nnew_page.close()\r\n\r\n=>page.close() closes the current page only where as browser.close() closes the other page as well\r\n=>cache stores the data only in the browser where as cookies store it in both server as well as browser\r\n=>#Get all the cookies from page. \r\nmy_cookies = page.context.cookies() \r\n#Clearing all the cookies. \r\npage.context.clear_cookies() \r\n#Setting new cookies to page. \r\nNew_cookies={\r\n\u2018name\u2019:\u2019ravi\u2019,\r\n\u2018udid\u2019:\u2019865435416486\u2019\r\n}\r\npage.context.add_cookies([new_cookies])\r\n=> Taking screenshot and storing the path \r\npage.screenshot(path='test.png',full_page=True) //if we don\u2019t do full_page=true then it will take only the brower main part ss\r\n\r\n=>Mouse Actions \r\nHover the dropdown\r\n page.wait_for_selector('//a[text()=\"SwitchTo\"]').hover()\r\n Click on element \r\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').click() \r\nDouble Click \r\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').dblclick() \r\nRight on Element \r\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').click(button=\"right\") \r\nShift Click \r\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').click(modifiers=[\"Shift\"]) \r\nKeyboard \r\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').press(\"A\")\r\n Backquote, Minus, Equal, Backslash, Backspace, Tab, Delete, Escape, ArrowDown, End, Enter, Home, Insert, PageDown, PageUp, ArrowRight, ArrowUp, F1 - F12, Digit0 - Digit9, KeyA - KeyZ, etc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3756, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f4636be-bf55-4a5c-94af-14ad909fc020": {"__data__": {"id_": "4f4636be-bf55-4a5c-94af-14ad909fc020", "embedding": null, "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\playwr.txt", "file_name": "playwr.txt", "file_type": "text/plain", "file_size": 4736, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bde5990f-e845-42f2-93e2-2be601ef15b4", "node_type": "4", "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\playwr.txt", "file_name": "playwr.txt", "file_type": "text/plain", "file_size": 4736, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "0795e3c87bf719f3228a5e5a580238edffa89cd1a0cb668cc5699a956ba291f8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32119916-2267-4c20-a26f-98f7a9ecbe07", "node_type": "1", "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\playwr.txt", "file_name": "playwr.txt", "file_type": "text/plain", "file_size": 4736, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "288b199349cfed17d73508539ea206b3309e543b443294551e762b5de03868c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "page.wait_for_selector('//a[text()=\"SwitchTo\"]').press(\"$\")\r\n\r\n=>Store multiple elements using list\r\n page.query_selector_all(\u2018tagname\u2019)\r\n=>use text_content() method to read the content within the tag\r\n=>page.on() acts as a listener with the help of this we can handle AJAX , . AJAX, or Asynchronous JavaScript and XML, is a fundamental technique used to build dynamic web applications.\r\nIdentifying AJAX calls and their triggers Intercepting and inspecting AJAX requests and responses Extracting valuable data from AJAX responses Handling pagination and infinite scroll scenarios with AJAX Synchronizing actions with AJAX completion\r\n=> Code: \r\npage.on('response', lambda response : handle_rejex(response)) \r\nMethod:\r\n def handle_rejex(response): \r\nif 'https://www.plus2net.com/php_tutorial... in response.url: \r\nstatus = response.status\r\n data = response.text() \r\nprint(f'status:{status},data:{data}')", "mimetype": "text/plain", "start_char_idx": 3757, "end_char_idx": 4660, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5e0c2e9-a305-494d-bd82-194ac293121a": {"__data__": {"id_": "a5e0c2e9-a305-494d-bd82-194ac293121a", "embedding": null, "metadata": {"file_name": "Playwright.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\Playwright.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 21300, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e251402f-3cd7-44df-bb8a-197cdf51814a", "node_type": "4", "metadata": {"file_name": "Playwright.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\Playwright.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 21300, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "f120b4fd7efeed60b7c5bbfa418c63972e928d8a21c85edc6a87931dae7e0a3e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e581b7d6-8678-43c2-b684-36023452687d", "node_type": "1", "metadata": {}, "hash": "5687346f117193831487a683ad5daf46b15852ceffe237cb29135948aeb8983c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Playwright\n\n\np.chromium.launch(headless=false) //headless=flase make it visible in frontend and if not given it will run in background only\n\npage.title() //gives the first line that appears when we hover at the tab icon on the top\n\n\n#css selector -id-#,class-. ,attribute- tagname[attribute=\u201dvalue\u201d]\n\n#id using\n\n=>email_textbox=page.wait_for_selector(\u2018#email\u2019)\n\nemail_textbox.type(\u2018bhoomi@gmail.com\u2019)\n\npage.wait_for_timeout(3000)\n\n=>page.wait_for_selector(\u2018#idname\u2019) .click()\n\npage.wait_for_timeout(3000)\n\n\n\n#xpath-Relative xpath \u2018//\u2019\n\n#using attribute - //tagname[@attributename=\u201dvalue\u201d]\n\n#text- //tagname[text()=\u201dwhatever_text\u201d]\n\n\n\n#contains\n\n#attributes- //tagname[contains(@attribute,\u201dvalue\u201d)]\n\n#text -//tagname[contains(text(),\u201dUsername\u201d)]\n\n\n\n#Starts-with- //tagname[starts-with(@id,\u2019whatever_u_type\u2019)]  //similarly we can do it with end-with\n\n# family\n\n#parent - //tagname[@id=\u201dxy\u201d]/parent:: input[]\n\n#child - //tagname[@id =\u201dxy\u201d]/child::input[]\n\n#sibling-//tagname[@id =\u201dxy\u201d]//sibling::input[]\n\n#ancestor\n\n=>Select Drop\n\nFind the select Location \n\nselect_dropdown = page.query_selector('//select[@id=\"Skills\"]')\n\nSelect the option \n\nselect_dropdown.select_option(label='Art Design') page.select_option('//select[@id=\"Skills\"]',label='AutoCAD') \n\npage.wait_for_timeout(5000)\n\n\n\n=>Script for Radio Button:\n\nradio_button = page.query_selector('//input[@value=\"FeMale\"]') \n\nradio_button.click()\n\nradio_button.check() \n\nScript for Radio Button:\n\n checkbox = page.query_selector('//input[@value=\"Cricket\"]')\n\n checkbox.check()\n\n\n\n=>def handle_dialog(dialog): \n\nmessage = dialog.message \n\ntext_alert.append(message)\n\n dialog.accept()\n\n\n\n with sync_playwright() as p: \n\nbrowser = p.chromium.launch(headless=False)\n\n page = browser.new_page()\n\n page.goto('https://demo.automationtesting.in/Ale...) \n\n# page.wait_for_selector('//div[@id=\u201dOKTAB\"]/button').click() \n\n\n\npage.wait_for_selector('//a[@href=\"#CancelTab\"]').click() \n\npage.wait_for_timeout(2000) \n\n#control alert\n\npage.on(\"dialog\",handle_dialog)\n\n page.wait_for_selector('//div[@id=\"CancelTab\"]/button').click() \n\npage.wait_for_timeout(2000) \n\nprint(text_alert[0])\n\n=>/ is used for direct child and // is used for siblings\n\n=>playwright automatically clicks on ok in alerts while selenium does not\n\n=>context can store multiple pages or tabs as list\n\n#to switch to new page\nnew_page=total_pages[1]\n\nnew_page.bring_to_front()\n\nnew_page.close()\n\n\n\n=>page.close() closes the current page only where as browser.close() closes the other page as well\n\n=>cache stores the data only in the browser where as cookies store it in both server as well as browser\n\n=>#Get all the cookies from page. \n\nmy_cookies = page.context.cookies() \n\n#Clearing all the cookies. \n\npage.context.clear_cookies() \n\n#Setting new cookies to page. \n\nNew_cookies={\n\n\u2018name\u2019:\u2019ravi\u2019,\n\n\u2018udid\u2019:\u2019865435416486\u2019\n\n}\n\npage.context.add_cookies([new_cookies])\n\n=> Taking screenshot and storing the path \n\npage.screenshot(path='test.png',full_page=True) //if we don\u2019t do full_page=true then it will take only the brower main part ss\n\n\n\n=>Mouse Actions \n\nHover the dropdown\n\n page.wait_for_selector('//a[text()=\"SwitchTo\"]').hover()\n\n Click on element \n\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').click() \n\nDouble Click \n\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').dblclick() \n\nRight on Element \n\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').click(button=\"right\") \n\nShift Click \n\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').click(modifiers=[\"Shift\"]) \n\nKeyboard \n\npage.wait_for_selector('//a[text()=\"SwitchTo\"]').press(\"A\")\n\n Backquote, Minus, Equal, Backslash, Backspace, Tab, Delete, Escape, ArrowDown, End, Enter, Home, Insert, PageDown, PageUp, ArrowRight, ArrowUp, F1 - F12, Digit0 - Digit9, KeyA - KeyZ, etc. page.wait_for_selector('//a[text()=\"SwitchTo\"]').press(\"$\")", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3803, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e581b7d6-8678-43c2-b684-36023452687d": {"__data__": {"id_": "e581b7d6-8678-43c2-b684-36023452687d", "embedding": null, "metadata": {"file_name": "Playwright.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\Playwright.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 21300, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e251402f-3cd7-44df-bb8a-197cdf51814a", "node_type": "4", "metadata": {"file_name": "Playwright.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\Playwright.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 21300, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "f120b4fd7efeed60b7c5bbfa418c63972e928d8a21c85edc6a87931dae7e0a3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a5e0c2e9-a305-494d-bd82-194ac293121a", "node_type": "1", "metadata": {"file_name": "Playwright.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\Playwright.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 21300, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "e0b0d8699b1840a54b3c954c2f41d152c22af58ee5049bb0f44e3317b77e6d69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "=>Store multiple elements using list\n\n page.query_selector_all(\u2018tagname\u2019)\n\n=>use text_content() method to read the content within the tag\n\n=>page.on() acts as a listener with the help of this we can handle AJAX , . AJAX, or Asynchronous JavaScript and XML, is a fundamental technique used to build dynamic web applications.\n\nIdentifying AJAX calls and their triggers Intercepting and inspecting AJAX requests and responses Extracting valuable data from AJAX responses Handling pagination and infinite scroll scenarios with AJAX Synchronizing actions with AJAX completion\n\n=> Code: \n\npage.on('response', lambda response : handle_rejex(response)) \n\nMethod:\n\n def handle_rejex(response): \n\nif 'https://www.plus2net.com/php_tutorial... in response.url: \n\nstatus = response.status\n\n data = response.text() \n\nprint(f'status:{status},data:{data}')", "mimetype": "text/plain", "start_char_idx": 3807, "end_char_idx": 4647, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e46745e2-9a3b-467d-9481-9f3a3cfcdbbe": {"__data__": {"id_": "e46745e2-9a3b-467d-9481-9f3a3cfcdbbe", "embedding": null, "metadata": {"file_name": "PYTHON NOTES.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\PYTHON NOTES.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 20530, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05a20e18-8fc3-4883-9c8f-b0a4024516da", "node_type": "4", "metadata": {"file_name": "PYTHON NOTES.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\PYTHON NOTES.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 20530, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "366c013590d804d7f0e79b148dac655bbe8b16bbf46ca2a3cd77d5ca46af0995", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f6d1077-40f7-44f4-8dbc-66ff09090efa", "node_type": "1", "metadata": {}, "hash": "3f67d91702572fef47fb6c5716b28d2806803f1ce9dc4b28d62c34dd88f23858", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "PYTHON NOTES (JUPYTER NOTEBOOK)\n\n=>labelEncoder assigns the number to each categorical data on the basis of occuernce and the number with higher value is considered as of high priority but one hot encoder just converts the categorical data into binary numbers or we can say in a vector form. Ex: Each unique symptom becomes a column, and for each disease, a 1 or 0 is placed to indicate whether that symptom is present for that disease.\n\n=>Code Breakdown of Removinf the trailing and leading whitespaces from the columns\n\ncols = df.columns:\n\nThis stores the column names of the DataFrame df in the variable cols.\n\ndata = df[cols].values.flatten():\n\ndf[cols]: Selects all the columns in the DataFrame.\n\n.values: Converts the DataFrame into a NumPy array.\n\n.flatten(): Flattens the 2D array (DataFrame) into a 1D array (vector).\n\nPurpose: This creates a flattened version of the DataFrame's data for easier processing.\n\ns = pd.Series(data):\n\nConverts the flattened NumPy array into a pandas Series s.\n\nPurpose: Allows string operations to be applied to the data.\n\ns = s.str.strip():\n\nRemoves leading and trailing whitespace from each element in the Series.\n\nPurpose: Cleans up the data by stripping any extra spaces from strings.\n\ns = s.values.reshape(df.shape):\n\nConverts the cleaned Series back into a NumPy array using .values.\n\nReshapes the array to the original shape of the DataFrame (df.shape).\n\nPurpose: Restores the original DataFrame structure while keeping the cleaned data.\n\ndf = pd.DataFrame(s, columns=df.columns):\n\nConverts the reshaped array back into a pandas DataFrame.\n\nAssigns the original column names (df.columns) to the new DataFrame.\n\nPurpose: Reconstructs the DataFrame with the cleaed data and original column names\n\n=>\uf0b7  axis=1: Specifies that columns, not rows, should be dropped.\n\n\uf0b7  inplace=True: Performs the operation directly on the DataFrame dfx, modifying it in place (no need to assign it back to dfx).\n\n=>fit_transform(y_train):\n\nfit: Learns the unique classes in y_train and assigns each a numerical value (e.g., \"A\" \u2192 0, \"B\" \u2192 1, \"C\" \u2192 2).\n\ntransform: Converts the y_train labels into their corresponding numerical values.\n\ny_train is now an array of integers corresponding to the original labels.\n\nInverse Transform: Use le.inverse_transform() to convert encoded integers back to original labels.\n\nle.classes_:\n\nThis attribute of LabelEncoder provides the original class labels in the order they were assigned numerical values during the encoding process.\n\nIt's a NumPy array containing the unique classes sorted lexicographically.\n\n=>AUC-ROC\n\nMetric\n\n\n\nPurpose\n\n                                   Value Range\n\nBest Use Case\n\n\n\nF1Score\n\n Balance between precision and recall\n\n[0, 1]\n\nImbalanced datasets\n\n\n\nAUCROC  \n\nMeasures the ability to distinguish between classes\n\n[0.5, 1.0]\n\nEvaluating ranking capabilities", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2851, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f6d1077-40f7-44f4-8dbc-66ff09090efa": {"__data__": {"id_": "9f6d1077-40f7-44f4-8dbc-66ff09090efa", "embedding": null, "metadata": {"file_name": "PYTHON NOTES.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\PYTHON NOTES.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 20530, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05a20e18-8fc3-4883-9c8f-b0a4024516da", "node_type": "4", "metadata": {"file_name": "PYTHON NOTES.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\PYTHON NOTES.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 20530, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "366c013590d804d7f0e79b148dac655bbe8b16bbf46ca2a3cd77d5ca46af0995", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e46745e2-9a3b-467d-9481-9f3a3cfcdbbe", "node_type": "1", "metadata": {"file_name": "PYTHON NOTES.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\PYTHON NOTES.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 20530, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}, "hash": "ebe751acff7e5cc2f6206c479f6c9cae0d7d867192db90d106ba6d9cd57e8bf7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Purpose\n\n                                   Value Range\n\nBest Use Case\n\n\n\nF1Score\n\n Balance between precision and recall\n\n[0, 1]\n\nImbalanced datasets\n\n\n\nAUCROC  \n\nMeasures the ability to distinguish between classes\n\n[0.5, 1.0]\n\nEvaluating ranking capabilities\n\n\n\n\tF1 Score\n\n\tThe F1 score is a metric that combines precision and recall into a single value, particularly useful when dealing with imbalanced datasets. It is the harmonic mean of precision and recall, giving equal weight to both.\n\n\tFormula:\n\n\tF1=2\u22c5Precision\u22c5RecallPrecision+RecallF1 = 2 \\cdot \\frac{\\text{Precision} \\cdot \\text{Recall}}{\\text{Precision} + \\text{Recall}}F1=2\u22c5Precision+RecallPrecision\u22c5Recall\u200b\n\n\tWhere:\n\n\tPrecision = True\u00a0PositivesTrue\u00a0Positives+False\u00a0Positives\\frac{\\text{True Positives}}{\\text{True Positives} + \\text{False Positives}}True\u00a0Positives+False\u00a0PositivesTrue\u00a0Positives\u200b\nMeasures how many predicted positives are actually correct.\n\n\tRecall = True\u00a0PositivesTrue\u00a0Positives+False\u00a0Negatives\\frac{\\text{True Positives}}{\\text{True Positives} + \\text{False Negatives}}True\u00a0Positives+False\u00a0NegativesTrue\u00a0Positives\u200b\nMeasures how many actual positives are correctly identified.\n\n\tInterpretation:\n\n\t1.0: Perfect precision and recall.\n\n\t0.0: The model failed completely.\n\n\tBest used when you need a balance between precision and recall.\n\n\t\n\n\tAUC-ROC\n\n\tThe Area Under the Receiver Operating Characteristic (ROC) Curve, abbreviated as AUC-ROC, is a metric used to evaluate the performance of a binary (or multi-class) classification model.\n\n\tComponents:\n\n\tROC Curve: A plot of the True Positive Rate (Recall) against the False Positive Rate at various classification thresholds.\n\n\tTrue Positive Rate (TPR) = Recall = True\u00a0PositivesTrue\u00a0Positives+False\u00a0Negatives\\frac{\\text{True Positives}}{\\text{True Positives} + \\text{False Negatives}}True\u00a0Positives+False\u00a0NegativesTrue\u00a0Positives\u200b\n\n\tFalse Positive Rate (FPR) = False\u00a0PositivesFalse\u00a0Positives+True\u00a0Negatives\\frac{\\text{False Positives}}{\\text{False Positives} + \\text{True Negatives}}False\u00a0Positives+True\u00a0NegativesFalse\u00a0Positives\u200b\n\n\tAUC: The area under the ROC curve, which measures how well the model distinguishes between classes.\n\n\t1.0: Perfect model.\n\n\t0.5: Random guessing (no predictive power).\n\n\t< 0.5: Worse than random guessing (model is inverted).\n\n\tMulti-Class Classification:\n\n\tFor multi-class problems, the AUC-ROC is calculated using strategies like:\n\n\tOne-vs-Rest (OvR): Evaluates each class against all others.\n\n\tOne-vs-One (OvO): Evaluates each pair of classes.", "mimetype": "text/plain", "start_char_idx": 2592, "end_char_idx": 5098, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bd07752a-5e8a-49d6-993f-4d6da276fea2": {"node_ids": ["41f5853b-080d-4dd9-aafb-161d618ce7f9"], "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 3240, "creation_date": "2025-02-22", "last_modified_date": "2025-02-22"}}, "bde5990f-e845-42f2-93e2-2be601ef15b4": {"node_ids": ["32119916-2267-4c20-a26f-98f7a9ecbe07", "4f4636be-bf55-4a5c-94af-14ad909fc020"], "metadata": {"file_path": "G:\\CodesLinux\\QueansRAG\\text\\playwr.txt", "file_name": "playwr.txt", "file_type": "text/plain", "file_size": 4736, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}}, "e251402f-3cd7-44df-bb8a-197cdf51814a": {"node_ids": ["a5e0c2e9-a305-494d-bd82-194ac293121a", "e581b7d6-8678-43c2-b684-36023452687d"], "metadata": {"file_name": "Playwright.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\Playwright.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 21300, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}}, "05a20e18-8fc3-4883-9c8f-b0a4024516da": {"node_ids": ["e46745e2-9a3b-467d-9481-9f3a3cfcdbbe", "9f6d1077-40f7-44f4-8dbc-66ff09090efa"], "metadata": {"file_name": "PYTHON NOTES.docx", "file_path": "G:\\CodesLinux\\QueansRAG\\text\\PYTHON NOTES.docx", "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "file_size": 20530, "creation_date": "2025-03-02", "last_modified_date": "2025-03-02"}}}}